name: Deploy Recipe App API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  setup:
    name: Setup Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init (Setup)
        working-directory: ./infra/setup
        run: terraform init

      - name: Terraform Apply (Setup)
        working-directory: ./infra/setup
        run: terraform apply -auto-approve

  build-and-push:
    name: Build and Push Docker Images
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR Repository URLs
        id: get-ecr-urls
        run: |
          APP_REPO=$(aws ecr describe-repositories --repository-names recipe-app-api-app --query 'repositories[0].repositoryUri' --output text)
          PROXY_REPO=$(aws ecr describe-repositories --repository-names recipe-app-api-proxy --query 'repositories[0].repositoryUri' --output text)
          echo "APP_REPO=$APP_REPO" >> $GITHUB_ENV
          echo "PROXY_REPO=$PROXY_REPO" >> $GITHUB_ENV

      - name: Build and push App image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.APP_REPO }}:${{ github.sha }},${{ env.APP_REPO }}:latest

      - name: Build and push Proxy image
        uses: docker/build-push-action@v4
        with:
          context: ./proxy
          push: true
          tags: ${{ env.PROXY_REPO }}:${{ github.sha }},${{ env.PROXY_REPO }}:latest

      - name: Set image tags for deployment
        run: |
          echo "APP_IMAGE=${{ env.APP_REPO }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "PROXY_IMAGE=${{ env.PROXY_REPO }}:${{ github.sha }}" >> $GITHUB_ENV

  deploy:
    name: Deploy Infrastructure
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init (Deploy)
        working-directory: ./infra/deploy
        run: terraform init

      - name: Terraform Workspace
        working-directory: ./infra/deploy
        run: |
          WORKSPACE="${{ github.event.inputs.environment || 'dev' }}"
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE

      - name: Terraform Apply (Deploy)
        working-directory: ./infra/deploy
        run: |
          terraform apply -auto-approve \
            -var="ecr_app_image=${{ env.APP_IMAGE }}" \
            -var="ecr_proxy_image=${{ env.PROXY_IMAGE }}" \
            -var="django_secret_key=${{ secrets.DJANGO_SECRET_KEY }}"

  migrate-and-collectstatic:
    name: Run Migrations and Collect Static Files
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get ECS Task ARN
        id: get-task
        run: |
          CLUSTER_NAME="recipe-app-${{ github.event.inputs.environment || 'dev' }}-cluster"
          SERVICE_NAME="recipe-app-${{ github.event.inputs.environment || 'dev' }}-api"
          TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query 'taskArns[0]' --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV

      - name: Run Migrations
        run: |
          aws ecs execute-command \
            --cluster recipe-app-${{ github.event.inputs.environment || 'dev' }}-cluster \
            --task ${{ env.TASK_ARN }} \
            --container api \
            --command "/bin/sh -c 'cd /app && python manage.py migrate'" \
            --interactive

      - name: Collect Static Files
        run: |
          aws ecs execute-command \
            --cluster recipe-app-${{ github.event.inputs.environment || 'dev' }}-cluster \
            --task ${{ env.TASK_ARN }} \
            --container api \
            --command "/bin/sh -c 'cd /app && python manage.py collectstatic --noinput'" \
            --interactive
